<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tellus.service.core.mapper.RoleMapper">
    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.tellus.service.core.model.RoleEntity">
        <id column="ID" property="id"/>
        <result column="NAME" property="name"/>
        <result column="ROLE" property="role"/>
        <result column="REMARK" property="remark"/>
        <result column="ENABLED" property="enabled"/>
        <result column="CREATOR" property="creator"/>
        <result column="CREATED_AT" property="createdAt"/>
        <result column="UPDATER" property="updater"/>
        <result column="UPDATED_AT" property="updatedAt"/>
        <result column="PARENT_ID" property="parentId"/>
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        ID, NAME, ROLE, REMARK, ENABLED, CREATOR, CREATED_AT, UPDATER, UPDATED_AT
    </sql>

    <!-- @formatter:off -->
    <!-- 根据用户 Id 查询角色 -->
    <select id="selectByUserIds" resultMap="BaseResultMap">
        SELECT ID,
               NAME,
               ROLE,
               REMARK,
               ENABLED,
               CREATOR,
               CREATED_AT,
               UPDATER,
               UPDATED_AT,
               PARENT_ID
        FROM (
                     SELECT UR.USER_ID,
                            R.ID,
                            R.NAME,
                            R.ROLE,
                            R.REMARK,
                            R.ENABLED,
                            R.CREATOR,
                            R.CREATED_AT,
                            R.UPDATER,
                            R.UPDATED_AT,
                            R2.ANCESTOR PARENT_ID
                     FROM T_ROLE R
                                  JOIN T_USER_ROLE UR ON R.ID = UR.ROLE_ID
                                  JOIN (SELECT ANCESTOR, DESCENDANT FROM T_RELATION WHERE DISTANCE = 1 AND TYPE = 3) R2
                             ON R2.DESCENDANT = R.ID

                     UNION

                     SELECT U.ID        USER_ID,
                            R3.ID,
                            R3.NAME,
                            R3.ROLE,
                            R3.REMARK,
                            R3.ENABLED,
                            R3.CREATOR,
                            R3.CREATED_AT,
                            R3.UPDATER,
                            R3.UPDATED_AT,
                            R4.ANCESTOR PARENT_ID
                     FROM T_USER U,
                          T_GROUP_USER GU,
                          T_GROUP G,
                          T_GROUP_ROLE GR,
                          T_ROLE R3
                                  JOIN (SELECT ANCESTOR, DESCENDANT FROM T_RELATION WHERE DISTANCE = 1 AND TYPE = 3) R4
                                  ON R4.DESCENDANT = R3.ID
                     WHERE U.ID = GU.USER_ID
                       AND G.ID = GU.GROUP_ID
                       AND G.ID = GR.GROUP_ID
                       AND R3.ID = GR.ROLE_ID
                     ) R5
        WHERE R5.USER_ID IN
        <foreach collection="userIds" item="userId" index="index" open="(" separator="," close=")">
            #{userId}
        </foreach>
    </select>
    <!-- @formatter:on -->

    <!-- 根据组织 Id, 查询角色 -->
    <select id="selectByGroupIds" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM T_ROLE R JOIN t_group_role GR ON R.ID = GR.ROLE_ID
        WHERE GR.GROUP_ID IN
        <foreach collection="groupIds" item="groupId" index="index" open="(" separator="," close=")">
            #{groupId}
        </foreach>
    </select>

    <!-- =================================================================================  -->
    <!--       == Relationship ==     -->
    <!-- =================================================================================  -->

    <!-- 查询指定节点下最深层级的所有子节点 -->
    <select id="selectLowestDistances" resultMap="BaseResultMap">
        SELECT R.ID,
               R.NAME,
               R.ROLE,
               R.ENABLED,
               R.REMARK,
               R.CREATOR,
               R.CREATED_AT,
               R.UPDATER,
               R.UPDATED_AT
        FROM T_RELATION REL
                     JOIN (SELECT ANCESTOR, MAX(DISTANCE) DISTANCE FROM T_RELATION WHERE TYPE = 3 GROUP BY ANCESTOR) R2
                ON REL.ANCESTOR = R2.ANCESTOR AND REL.DISTANCE = R2.DISTANCE
                     JOIN T_ROLE R ON REL.DESCENDANT = R.ID
        WHERE REL.ANCESTOR = #{ancestor}
    </select>

    <!-- 查询节点 #{ancestor} 的所有子级 -->
    <!-- @formatter:off -->
    <select id="selectSubs" resultMap="BaseResultMap">
        SELECT R.ID,
               R.NAME,
               R.ROLE,
               R.ENABLED,
               R.REMARK,
               R.CREATOR,
               R.CREATED_AT,
               R.UPDATER,
               R.UPDATED_AT,
               R2.ANCESTOR PARENT_ID
        FROM T_RELATION REL
                     JOIN T_ROLE R ON (REL.DESCENDANT = R.ID AND REL.TYPE = 3)
                     JOIN (SELECT ANCESTOR, DESCENDANT FROM T_RELATION WHERE DISTANCE = 1 AND TYPE = 3) R2
                ON REL.DESCENDANT = R2.DESCENDANT
        WHERE
          <if test="includeSelf == true">
              AND REL.DISTANCE >= #{distance}
          </if>
          <if test="includeSelf == false">
              AND REL.DISTANCE > #{distance}
          </if>
          <if test="ancestors != null and ancestors.size > 0">
              AND REL.ANCESTOR IN
              <foreach collection="ancestors" item="ancestor" index="index" open="(" separator="," close=")">
                  #{ancestor}
              </foreach>
          </if>
    </select>
    <!-- @formatter:on -->

    <!-- 查询 #{ancestor} 第 #{distance} 层的所有节点 -->
    <select id="selectByDistance" resultMap="BaseResultMap">
        SELECT R.ID,
               R.NAME,
               R.ROLE,
               R.ENABLED,
               R.REMARK,
               R.CREATOR,
               R.CREATED_AT,
               R.UPDATER,
               R.UPDATED_AT,
               R2.ANCESTOR PARENT_ID
        FROM T_RELATION REL
                     JOIN T_ROLE R ON (REL.DESCENDANT = R.ID AND REL.TYPE = 3)
                     JOIN (SELECT ANCESTOR, DESCENDANT FROM T_RELATION WHERE DISTANCE = 1 AND TYPE = 3) R2
                ON REL.DESCENDANT = R2.DESCENDANT
        WHERE REL.ANCESTOR = #{ancestor}
          AND REL.DISTANCE = #{distance}
    </select>

    <!-- 查询 #{ancestor} 上级到第 #{distance} 层之间的所有节点 -->
    <select id="selectPathSubs" resultMap="BaseResultMap">
        SELECT R.ID,
               R.NAME,
               R.ROLE,
               R.ENABLED,
               R.REMARK,
               R.CREATOR,
               R.CREATED_AT,
               R.UPDATER,
               R.UPDATED_AT,
               R2.ANCESTOR PARENT_ID
        FROM T_RELATION REL
                     JOIN T_ROLE R ON (REL.DESCENDANT = R.ID AND REL.TYPE = 3)
                     JOIN (SELECT ANCESTOR, DESCENDANT FROM T_RELATION WHERE DISTANCE = 1 AND TYPE = 3) R2
                ON REL.DESCENDANT = R2.DESCENDANT
        WHERE REL.ANCESTOR = #{ancestor}
          AND REL.DISTANCE <![CDATA[<=]]> #{distance}
    </select>

    <!-- 查询 #{ancestor} (不含) 与 #{descendant} 之间所有的节点 -->
    <select id="selectPathToAncestor" resultMap="BaseResultMap">
        SELECT R.ID,
               R.NAME,
               R.ROLE,
               R.ENABLED,
               R.REMARK,
               R.CREATOR,
               R.CREATED_AT,
               R.UPDATER,
               R.UPDATED_AT,
               R2.ANCESTOR PARENT_ID
        FROM T_RELATION REL
                     JOIN T_ROLE R ON (REL.DESCENDANT = R.ID AND REL.TYPE = 3)
                     JOIN (SELECT ANCESTOR, DESCENDANT FROM T_RELATION WHERE DISTANCE = 1 AND TYPE = 3) R2
                ON REL.DESCENDANT = R2.DESCENDANT
        WHERE REL.DESCENDANT = #{descendant}
          AND REL.DISTANCE <![CDATA[<]]>
              (SELECT DISTANCE
               FROM T_RELATION
               WHERE REL.TYPE = 3
                 AND DESCENDANT = #{descendant}
                 AND ANCESTOR = #{ancestor})
        ORDER BY DISTANCE DESC
    </select>

    <!-- 查询 #{descendant} 往上第 #{distance} 层的父节点 -->
    <select id="selectParent" resultMap="BaseResultMap">
        SELECT R.ID,
               R.NAME,
               R.ROLE,
               R.ENABLED,
               R.REMARK,
               R.CREATOR,
               R.CREATED_AT,
               R.UPDATER,
               R.UPDATED_AT,
               R2.ANCESTOR PARENT_ID
        FROM T_RELATION REL
                     JOIN T_ROLE R ON (REL.DESCENDANT = R.ID AND REL.TYPE = 3)
                     JOIN (SELECT ANCESTOR, DESCENDANT FROM T_RELATION WHERE DISTANCE = 1 AND TYPE = 3) R2
                ON REL.DESCENDANT = R2.DESCENDANT
        WHERE REL.DESCENDANT = #{descendant}
          AND REL.DISTANCE = #{distance}
    </select>

    <!-- 查询 #{descendant} 往上到第 #{distance} 层父节点之间的所有节点 -->
    <select id="selectPathParents" resultMap="BaseResultMap">
        SELECT R.ID,
               R.NAME,
               R.ROLE,
               R.ENABLED,
               R.REMARK,
               R.CREATOR,
               R.CREATED_AT,
               R.UPDATER,
               R.UPDATED_AT,
               R2.ANCESTOR PARENT_ID
        FROM T_RELATION REL
                     JOIN T_ROLE R ON (REL.DESCENDANT = R.ID AND REL.TYPE = 3)
                     JOIN (SELECT ANCESTOR, DESCENDANT FROM T_RELATION WHERE DISTANCE = 1 AND TYPE = 3) R2
                ON REL.DESCENDANT = R2.DESCENDANT
        WHERE REL.DESCENDANT = #{descendant}
          AND REL.DISTANCE <![CDATA[<]]> #{distance}
    </select>

    <!-- 根据条件分页查询, 返回直属上级 Id -->
    <select id="selectWithAncestorPage" resultMap="BaseResultMap">
        SELECT R.ID,
               R.NAME,
               R.ROLE,
               R.ENABLED,
               R.REMARK,
               R.CREATOR,
               R.CREATED_AT,
               R.UPDATER,
               R.UPDATED_AT,
               R2.ANCESTOR PARENT_ID
        FROM T_RELATION REL
                     JOIN T_ROLE R ON (REL.DESCENDANT = R.ID AND REL.TYPE = 3)
                     JOIN (SELECT ANCESTOR, DESCENDANT FROM T_RELATION WHERE DISTANCE = 1 AND TYPE = 3) R2
                ON REL.DESCENDANT = R2.DESCENDANT
    </select>
</mapper>
